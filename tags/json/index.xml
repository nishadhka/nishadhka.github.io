<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Json on Nishadh KA</title>
    <link>/tags/json/</link>
    <description>Recent content in Json on Nishadh KA</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 28 May 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/json/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python to query and edit json files</title>
      <link>/working-notes/2014/wn_2014-05/python-querying-and-editing-json/</link>
      <pubDate>Wed, 28 May 2014 00:00:00 +0000</pubDate>
      
      <guid>/working-notes/2014/wn_2014-05/python-querying-and-editing-json/</guid>
      <description>For most of the works related to this and this It involves editing and querying of JSON and its formats such as GeoJson and Topojson In cbe-air web application, topjson is going to act as map element, and its editing required for real-time map generation and map styling In node.js based web application for visualizing model output, NetCDF output from WRF has to converted into geojson and made similar with the earth wind data formate.</description>
    </item>
    
    <item>
      <title>The json data into SQLinsert with python</title>
      <link>/working-notes/2014/wn_2014-05/json-data-into-sqlinsert-with-python/</link>
      <pubDate>Fri, 23 May 2014 00:00:00 +0000</pubDate>
      
      <guid>/working-notes/2014/wn_2014-05/json-data-into-sqlinsert-with-python/</guid>
      <description>To start with json data in python and loop over its elements
import json json_data=open(&#39;data.json&#39;) data=json.load(json_data) a=data[0][&#39;samples&#39;] for rs in a: print rs[&#39;wind&#39;]  To join two list as a column in python, to join two list inpython
for c1, c2 in zip(de, c): print &amp;quot;%-9s %s&amp;quot; % (c1, c2)  To append loop items into a array
c=[] for rs in a: c.append(rs[&#39;wind&#39;])  To remove u from list elemnt</description>
    </item>
    
    <item>
      <title>Converting WRF ouput netcdf into json</title>
      <link>/working-notes/2014/wn_2014-05/converting-wrf-ouput-netcdf-into-json/</link>
      <pubDate>Mon, 19 May 2014 00:00:00 +0000</pubDate>
      
      <guid>/working-notes/2014/wn_2014-05/converting-wrf-ouput-netcdf-into-json/</guid>
      <description>Tried with grib2json for converting NetCDF into JSON 1 For this NetCDF has to converted into grib2 For converting into grib2, python based iris is useful 2, but only work with cf compliant NetCDF WRF output in NetCDF is not a cf compliant So has to use a tool which converts WRF NetCDF into CF compliant The Wrfncxnj.py tool 3 exactly do this with more functions such as extraction of variables.</description>
    </item>
    
    <item>
      <title>Store json data into Mysql using python</title>
      <link>/working-notes/2013/wn_2013-10/store-json-data-into-mysql-using-python/</link>
      <pubDate>Mon, 28 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>/working-notes/2013/wn_2013-10/store-json-data-into-mysql-using-python/</guid>
      <description>Web services APIs such as weather underground data provided in json format is stored in Mysql table using this python script.
Based on stack overflow answers http://stackoverflow.com/questions/1640715/get-json-data-via-url-and-use-in-python-simplejson http://stackoverflow.com/questions/5687718/python-mysql-insert-data
import urllib2 import json import MySQLdb
req = urllib2.Request(&amp;ldquo;http://api.wunderground.com/api/YOUR API key/conditions/q/country/town.json&amp;rdquo;) opener = urllib2.buildopener() f = opener.open(req) data = json.load(f) print data[&amp;lsquo;current_observation&amp;rsquo;][&amp;lsquo;observation_location&amp;rsquo;][&amp;lsquo;city&amp;rsquo;],data[&amp;lsquo;currentobservation&amp;rsquo;][&amp;lsquo;observationtimerfc822&amp;rsquo;]
conn = MySQLdb.connect(host= &amp;ldquo;localhost&amp;rdquo;, user=&amp;ldquo;YOUR username&amp;rdquo;, passwd=&amp;ldquo;YOUR password&amp;rdquo;, db=&amp;ldquo;database&amp;rdquo;) x = conn.cursor()
try: x.execute( &amp;ldquo;INSERT INTO CBEmeterology (Station, DateAP)&amp;rdquo; &amp;ldquo;VALUES (%s,%s)&amp;rdquo;,(data[&amp;lsquo;current_observation&amp;rsquo;][&amp;lsquo;observation_location&amp;rsquo;][&amp;lsquo;city&amp;rsquo;],data[&amp;lsquo;currentobservation&amp;rsquo;][&amp;lsquo;observationtimerfc822&amp;rsquo;])) conn.</description>
    </item>
    
  </channel>
</rss>